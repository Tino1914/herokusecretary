{"version":3,"sources":["logic/http-common.js","logic/ClientDataService.js","components/register.component.js","layouts/Header.js","components/table.component.js","components/update.component.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","id","data","post","put","delete","email","Register","props","handleChange","e","setState","target","value","addClient","firstName","state","lastName","licensePlate","phoneNumber","currentClient","licencePlate","length","ClientDataService","postClient","then","response","message","console","log","history","push","catch","alert","bind","className","onChange","this","placeholder","type","onClick","role","Component","Header","href","src","alt","data-toggle","data-target","to","Table","deleteClient","window","confirm","retrieveClients","location","reload","emailClient","sendEmail","clients","getAll","map","client","index","key","colSpan","React","Update","getClient","val","tid","prevState","updateClient","match","params","App","exact","path","component","RegisterClient","UpdateClient","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.e8145542.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default axios.create({\r\n  baseURL:\"https://heroku-secretary.herokuapp.com/\",\r\n  headers: {\r\n      \"Content-type\": \"application/json\"\r\n    }\r\n});\r\n","import http from './http-common';\r\n\r\nclass ClientDataService{\r\n     getAll(){\r\n         return http.get(\"/clients/all\");\r\n     }\r\n     getClient(id){\r\n       return http.get(`/clients/${id}`);\r\n     }\r\n     postClient(data){\r\n       return http.post(\"/clients/add\" , data);\r\n     }\r\n     updateClient(id, data){\r\n       return http.put(`/clients/update/${id}`, data);\r\n     }\r\n     deleteClient(id){\r\n       return http.delete(`/clients/delete/${id}`);\r\n     }\r\n     deleteClients(){\r\n         return http.delete(\"/clients/deleteAll\");\r\n     }\r\n\r\n    sendEmail(email){\r\n        return http.post(`/clients/sendmail/${email}`);\r\n    }\r\n\r\n }\r\nexport default new ClientDataService();\r\n\r\n","import React, { Component } from \"react\";\r\nimport ClientDataService from \"../logic/ClientDataService\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nclass Register extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.addClient = this.addClient.bind(this);\r\n        this.state = {\r\n            currentClient:{\r\n                firstName: \"\",\r\n                lastName: \"\",\r\n                email: \"\",\r\n                licensePlate: \"\",\r\n                phoneNumber: \"\"\r\n            },\r\n            message:\"\"\r\n        };\r\n    }\r\n\r\n    handleChange = (e) =>{\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n    addClient = () =>{\r\n        var data = {\r\n            firstName: this.state.firstName,\r\n            lastName: this.state.lastName,\r\n            email: this.state.email,\r\n            licensePlate: this.state.licensePlate,\r\n            phoneNumber: this.state.phoneNumber\r\n        };\r\n        \r\n        //console.log(data);\r\n        if(this.state.currentClient.firstName !== \"\" || this.state.currentClient.lastName != \"\" || this.state.currentClient.licencePlate != \"\" || this.state.currentClient.phoneNumber.length == 9)\r\n       {\r\n        ClientDataService.postClient(data)\r\n            .then(response => {\r\n                this.setState({\r\n                    currentClient:{\r\n                        firstName: response.data.firstName,\r\n                        lastName: response.data.lastName,\r\n                        email: response.data.email,\r\n                        licensePlate: response.data.licensePlate,\r\n                        phoneNumber: response.data.phoneNumber\r\n                    },\r\n                    message:\"Client Added!\"\r\n                    \r\n                });\r\n                \r\n                console.log(response.data);\r\n            })\r\n            .then(()=>{\r\n                this.props.history.push('/clients')\r\n            })\r\n            \r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n        }\r\n        else{\r\n            alert(\"there is an invalid data input\")\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <span className=\"h3\">\r\n                    <h1>Register Client</h1>\r\n                    <hr/>\r\n                    <br/>\r\n                    <center>\r\n                        <div className=\"col-12 col-lg-4 mt-2 hv-center\">\r\n                            <form>\r\n                                <div className=\"form-group text-left\">\r\n                                    <input\r\n                                        onChange={this.handleChange}\r\n                                        className=\"form-control\"\r\n                                        id=\"firstName\"\r\n                                        placeholder=\"First Name\"\r\n                                    />\r\n                                </div>\r\n                                <div className=\"form-group text-left\">\r\n                                    <input onChange={this.handleChange} className=\"form-control\" id=\"lastName\" placeholder=\"Last Name\" />\r\n                                </div>\r\n                                <div className=\"form-group text-left\">\r\n                                    <input onChange={this.handleChange} className=\"form-control\" id=\"licensePlate\" placeholder=\"License Plate\" />\r\n                                </div>\r\n                                <div className=\"form-group text-left\">\r\n                                    <input onChange={this.handleChange} type=\"tel\" className=\"form-control\" id=\"phoneNumber\" placeholder=\"Phone Number\" />\r\n                                </div>\r\n                                <div className=\"form-group text-left\">\r\n                                    <input onChange={this.handleChange} type=\"email\" className=\"form-control\" id=\"email\" placeholder=\"Email\" />\r\n                                </div>\r\n                               \r\n                                <a onClick={this.addClient} className=\"btn btn-info\" role=\"button\">Register Client</a>\r\n                                \r\n                                <br/>\r\n                            </form>\r\n                        </div>\r\n                    </center>\r\n                </span>\r\n                <br/>\r\n                <p>{this.state.message}</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\nexport default Register;\r\n\r\n","import React, { Component } from 'react'\r\nimport {Link} from \"react-router-dom\";\r\n\r\n class Header extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                \r\n                <nav className=\"navbar navbar-expand-sm navbar navbar-dark bg-dark\">\r\n                <div className=\"container\">\r\n                <a className=\"navbar-brand\" href=\"/registerClient\">\r\n          <img className=\"imglogo\" src=\"images/sioux.png\" alt=\"\"/>\r\n              </a>\r\n                    <a className=\"navbar-brand\" href=\"/registerClient\">\r\n                       Secretary App\r\n                    </a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mobile-nav\">\r\n                        <span className=\"navbar-toggler-icon\" />\r\n                    </button>\r\n        \r\n                    <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\r\n\r\n                        <ul className=\"navbar-nav \">\r\n                            <li className=\"nav-item\">\r\n                                    <Link to={\"/clients\"} className=\"nav-link\">\r\n                                        Clients\r\n                                    </Link>\r\n                            </li>\r\n                        </ul>\r\n\r\n                        <ul className=\"navbar-nav\">\r\n                            <li className=\"nav-item\">\r\n                                <Link to={\"/registerClient\"} className=\"nav-link\">\r\n                                    Register Client\r\n                                </Link>\r\n                            </li>\r\n                        </ul>\r\n\r\n\r\n                        {/*<ul className=\"navbar-nav\">*/}\r\n                        {/*    <li className=\"nav-item\">*/}\r\n                        {/*        <a className=\"nav-link\" href=\"clientsInfo\">*/}\r\n                        {/*            Delete  client*/}\r\n                        {/*        </a>*/}\r\n                        {/*    </li>*/}\r\n                        {/*</ul>*/}\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Header;","import React from 'react';\r\nimport ClientDataService from \"../logic/ClientDataService\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass Table extends React.Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {clients: []};\r\n    this.retrieveClients = this.retrieveClients.bind(this);\r\n  }\r\n\r\n  componentDidMount () {\r\n      this.retrieveClients();\r\n  }\r\n\r\n    retrieveClients() {\r\n        ClientDataService.getAll()\r\n            .then(response => {\r\n                this.setState({\r\n                    clients: response.data\r\n                });\r\n                console.log(response.data);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n    }\r\n    deleteClient = (id) => {\r\n      if(window.confirm('Are you sure?')) {\r\n          ClientDataService.deleteClient(id)\r\n              .then(response => {\r\n                  console.log(response.data);\r\n              })\r\n              .catch(e => {\r\n                  console.log(e);\r\n              });\r\n          this.retrieveClients();\r\n          window.location.reload(false);\r\n      }\r\n  }\r\n\r\n  emailClient = (email) => {\r\n      ClientDataService.sendEmail(email)\r\n          .then(response => {\r\n              alert(response.data);\r\n          })\r\n          .catch(e => {\r\n              alert('Error sending email, check if the email is correct');\r\n              console.log(e);\r\n          });\r\n  }\r\n\r\n  render(){\r\n  return (\r\n    <center>\r\n    <table className=\"tableClients\">\r\n      <thead>\r\n        <tr>\r\n          <th className=\"tableHeader\">First Name</th>\r\n          <th className=\"tableHeader\">Last Name</th>\r\n          <th className=\"tableHeader\">License Plate</th>\r\n          <th className=\"tableHeader\">Email</th>\r\n          <th className=\"tableHeader\">Phone Number</th>\r\n         \r\n          \r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n      { (this.state.clients.length > 0) ? this.state.clients.map( (client, index) => {\r\n           return (\r\n            <tr key={ index }>\r\n                <td>{ client.firstName }</td>\r\n                <td>{ client.lastName }</td>\r\n                <td>{ client.licensePlate}</td>\r\n                <td>{ client.email }</td>\r\n                <td>{ client.phoneNumber }</td>\r\n                <td><center><button onClick={() => this.emailClient(client.email)} className=\"btn btn-info\">Email</button></center></td>\r\n                <td><center><button className=\"btn btn-warning\">\r\n                    <Link to={\"/updateClient/\" + client.id} className=\"nav-btn\">\r\n                        Update\r\n                    </Link></button></center>\r\n                </td><td><center><button onClick={() => this.deleteClient(client.id)} className=\"btn btn-danger\">Delete</button></center></td>\r\n\r\n\r\n            </tr>\r\n          )\r\n         }) : <tr><td colSpan=\"5\">Loading...</td></tr> }\r\n      </tbody>\r\n    </table>\r\n    </center>\r\n  );\r\n  }\r\n}\r\n\r\nexport default Table","import React, {Component} from 'react';\r\nimport ClientDataService from '../logic/ClientDataService';\r\nimport {BrowserRouter, Link, Redirect} from \"react-router-dom\";\r\n\r\nexport default class Update extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.getClient = this.getClient.bind(this);\r\n    this.updateClient = this.updateClient.bind(this);\r\n    this.state = {\r\n        currentClient:\r\n            {\r\n                id : null,\r\n                firstName : \"\",\r\n                lastName : \"\",\r\n                email : \"\",\r\n                licencePlate : \"\",\r\n                phoneNumber : \"\"\r\n            },\r\n        message : \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount()\r\n  {\r\n      this.getClient(this.props.match.params.id);\r\n      this.setState(prevState => ({\r\n          currentClient: {\r\n              ...prevState.currentClient,\r\n              id: this.props.match.params.id\r\n          }\r\n      }));\r\n  }\r\n\r\n  getClient = (id) =>{\r\n    ClientDataService.getClient(id).then(response => {\r\n      this.setState({\r\n        currentClient: response.data\r\n      });\r\n      console.log(response.data);\r\n    })\r\n    .catch(e => {\r\n      console.log(e)\r\n    });\r\n  }\r\n\r\n    handleChange = (e) => {\r\n        const val = e.target.value;\r\n        const tid = e.target.id;\r\n        this.setState(prevState => ({\r\n            currentClient: {\r\n                ...prevState.currentClient,\r\n                [tid]: val\r\n            }\r\n        }));\r\n        console.log(val + \" \" + tid)\r\n    }\r\n\r\n    updateClient = () =>{\r\n        if(this.state.currentClient.firstName != \"\" || this.state.currentClient.lastName != \"\" || this.state.currentClient.licencePlate !=\"\" || this.state.currentClient.phoneNumber.length == 9)\r\n        {ClientDataService.updateClient(\r\n            this.state.currentClient.id,\r\n            this.state.currentClient\r\n        )\r\n            .then(response => {\r\n                console.log(response.data);\r\n                this.setState({\r\n                    alert: \"The client was updated successfully!\"\r\n                });\r\n            })\r\n            .then(()=>{\r\n                this.props.history.push('/clients')\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            });\r\n        }\r\n        else{\r\n            alert(\"The input you gave is inorrect\")\r\n        }\r\n            \r\n    }\r\n\r\n    render() {\r\n        let { currentClient } = this.state;\r\n        return(\r\n            <div>\r\n                <span className=\"h3\">\r\n                <h1>Update Client</h1>\r\n                <hr/>\r\n                <br/>\r\n                <center>\r\n                    <div className=\"col-12 col-lg-4 mt-2 hv-center\">\r\n                        <form>\r\n                            <div className=\"form-group text-left\">\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"First Name\"\r\n                                    id=\"firstName\"\r\n                                    value={currentClient.firstName}\r\n                                    onChange = {this.handleChange}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group text-left\">\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"Last Name\"\r\n                                    id=\"lastName\"\r\n                                    value={currentClient.lastName}\r\n                                    onChange = {this.handleChange}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group text-left\">\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"License Plate\"\r\n                                    id=\"licensePlate\"\r\n                                    value={currentClient.licensePlate}\r\n                                    onChange = {this.handleChange}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group text-left\">\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"Phone Number\"\r\n                                    id=\"phoneNumber\"\r\n                                    value={currentClient.phoneNumber}\r\n                                    onChange = {this.handleChange}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group text-left\">\r\n                                <input\r\n                                    className=\"form-control\"\r\n                                    type=\"text\"\r\n                                    placeholder=\"Email\"\r\n                                    id=\"email\"\r\n                                    value={currentClient.email}\r\n                                    onChange = {this.handleChange}\r\n                                />\r\n                            </div>\r\n                            \r\n                            <Link to={\"/clients\"} className=\"btn btn-danger\"  >\r\n                                    Cancel\r\n                            </Link>\r\n                            <a onClick={this.updateClient} className=\"btn btn-warning\" role=\"button\" >\r\n                               Update Client \r\n                            </a>\r\n                            <br/>\r\n                        </form>\r\n                    </div>\r\n                </center>{/*TODO center tag to div align center*/}\r\n                </span>\r\n                <p>{this.state.message}</p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from \"react\";\r\nimport \"./App.css\";\r\nimport RegisterClient from \"./components/register.component\"\r\nimport Header from \"./layouts/Header\"\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport Table from \"./components/table.component\";\r\nimport UpdateClient from \"./components/update.component\"\r\n\r\nclass App extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {clients: []};\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Router>\r\n\t\t\t\t\t<div className=\"App\">\r\n\t\t\t\t\t\t<Header />\r\n\t\t\t\t\t\t<Route exact path=\"/\" component={RegisterClient} />\r\n\t\t\t\t\t\t<Route exact path=\"/clients\" component={Table} />\r\n\t\t\t\t\t\t<Route exact path=\"/updateClient/:id\" component={UpdateClient} />\r\n\t\t\t\t\t\t<Route exact path=\"/registerClient\" component={RegisterClient} />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</Router>\r\n\t\t\t</div>\r\n\t\t)\r\n  }\r\n}\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}