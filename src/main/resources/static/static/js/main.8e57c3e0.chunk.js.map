{"version":3,"sources":["logic/http-common.js","logic/ClientDataService.js","components/register.component.js","layouts/Header.js","components/table.component.js","components/update.component.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","id","data","post","put","delete","email","Register","props","handleChange","e","setState","target","value","addClient","firstName","state","lastName","licensePlate","phoneNumber","currentClient","licencePlate","length","ClientDataService","postClient","then","response","message","console","log","history","push","catch","alert","bind","className","onChange","this","placeholder","type","onClick","role","Component","Header","href","src","alt","data-toggle","data-target","to","Table","deleteClient","window","confirm","retrieveClients","location","reload","emailClient","sendEmail","clients","getAll","map","client","index","key","colSpan","React","Update","getClient","val","tid","prevState","updateClient","match","params","App","exact","path","component","RegisterClient","UpdateClient","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.8e57c3e0.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default axios.create({\n  baseURL:\"https://heroku-secretary.herokuapp.com/\",\n  headers: {\n      \"Content-type\": \"application/json\"\n    }\n});\n","import http from './http-common';\n\nclass ClientDataService{\n     getAll(){\n         return http.get(\"/clients/all\");\n     }\n     getClient(id){\n       return http.get(`/clients/${id}`);\n     }\n     postClient(data){\n       return http.post(\"/clients/add\" , data);\n     }\n     updateClient(id, data){\n       return http.put(`/clients/update/${id}`, data);\n     }\n     deleteClient(id){\n       return http.delete(`/clients/delete/${id}`);\n     }\n     deleteClients(){\n         return http.delete(\"/clients/deleteAll\");\n     }\n\n    sendEmail(email){\n        return http.post(`/clients/sendmail/${email}`);\n    }\n\n }\nexport default new ClientDataService();\n\n","import React, { Component } from \"react\";\nimport ClientDataService from \"../logic/ClientDataService\";\nimport {Link} from \"react-router-dom\";\n\nclass Register extends Component {\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.addClient = this.addClient.bind(this);\n        this.state = {\n            currentClient:{\n                firstName: \"\",\n                lastName: \"\",\n                email: \"\",\n                licensePlate: \"\",\n                phoneNumber: \"\"\n            },\n            message:\"\"\n        };\n    }\n\n    handleChange = (e) =>{\n        this.setState({\n            [e.target.id]: e.target.value\n        })\n    }\n\n    addClient = () =>{\n        var data = {\n            firstName: this.state.firstName,\n            lastName: this.state.lastName,\n            email: this.state.email,\n            licensePlate: this.state.licensePlate,\n            phoneNumber: this.state.phoneNumber\n        };\n        \n        //console.log(data);\n        if(this.state.currentClient.firstName !== \"\" || this.state.currentClient.lastName != \"\" || this.state.currentClient.licencePlate != \"\" || this.state.currentClient.phoneNumber.length == 9)\n       {\n        ClientDataService.postClient(data)\n            .then(response => {\n                this.setState({\n                    currentClient:{\n                        firstName: response.data.firstName,\n                        lastName: response.data.lastName,\n                        email: response.data.email,\n                        licensePlate: response.data.licensePlate,\n                        phoneNumber: response.data.phoneNumber\n                    },\n                    message:\"Client Added!\"\n                    \n                });\n                \n                console.log(response.data);\n            })\n            .then(()=>{\n                this.props.history.push('/clients')\n            })\n            \n            .catch(e => {\n                console.log(e);\n            });\n        }\n        else{\n            alert(\"there is an invalid data input\")\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <span className=\"h3\">\n                    <h1>Register Client</h1>\n                    <hr/>\n                    <br/>\n                    <center>\n                        <div className=\"col-12 col-lg-4 mt-2 hv-center\">\n                            <form>\n                                <div className=\"form-group text-left\">\n                                    <input\n                                        onChange={this.handleChange}\n                                        className=\"form-control\"\n                                        id=\"firstName\"\n                                        placeholder=\"First Name\"\n                                    />\n                                </div>\n                                <div className=\"form-group text-left\">\n                                    <input onChange={this.handleChange} className=\"form-control\" id=\"lastName\" placeholder=\"Last Name\" />\n                                </div>\n                                <div className=\"form-group text-left\">\n                                    <input onChange={this.handleChange} className=\"form-control\" id=\"licensePlate\" placeholder=\"License Plate\" />\n                                </div>\n                                <div className=\"form-group text-left\">\n                                    <input onChange={this.handleChange} type=\"tel\" className=\"form-control\" id=\"phoneNumber\" placeholder=\"Phone Number\" />\n                                </div>\n                                <div className=\"form-group text-left\">\n                                    <input onChange={this.handleChange} type=\"email\" className=\"form-control\" id=\"email\" placeholder=\"Email\" />\n                                </div>\n                               \n                                <a onClick={this.addClient} className=\"btn btn-info\" role=\"button\">Register Client</a>\n                                \n                                <br/>\n                            </form>\n                        </div>\n                    </center>\n                </span>\n                <br/>\n                <p>{this.state.message}</p>\n            </div>\n        )\n    }\n\n\n}\nexport default Register;\n\n","import React, { Component } from 'react'\nimport {Link} from \"react-router-dom\";\n\n class Header extends Component {\n    render() {\n        return (\n            <div>\n                \n                <nav className=\"navbar navbar-expand-sm navbar navbar-dark bg-dark\">\n                <div className=\"container\">\n                <a className=\"navbar-brand\" href=\"/registerClient\">\n          <img className=\"imglogo\" src=\"images/sioux.png\" alt=\"\"/>\n              </a>\n                    <a className=\"navbar-brand\" href=\"/registerClient\">\n                       Secretary App\n                    </a>\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#mobile-nav\">\n                        <span className=\"navbar-toggler-icon\" />\n                    </button>\n        \n                    <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\n\n                        <ul className=\"navbar-nav \">\n                            <li className=\"nav-item\">\n                                    <Link to={\"/clients\"} className=\"nav-link\">\n                                        Clients\n                                    </Link>\n                            </li>\n                        </ul>\n\n                        <ul className=\"navbar-nav\">\n                            <li className=\"nav-item\">\n                                <Link to={\"/registerClient\"} className=\"nav-link\">\n                                    Register Client\n                                </Link>\n                            </li>\n                        </ul>\n\n\n                        {/*<ul className=\"navbar-nav\">*/}\n                        {/*    <li className=\"nav-item\">*/}\n                        {/*        <a className=\"nav-link\" href=\"clientsInfo\">*/}\n                        {/*            Delete  client*/}\n                        {/*        </a>*/}\n                        {/*    </li>*/}\n                        {/*</ul>*/}\n                    </div>\n                </div>\n            </nav>\n            </div>\n        )\n    }\n}\nexport default Header;","import React from 'react';\nimport ClientDataService from \"../logic/ClientDataService\";\nimport { Link } from \"react-router-dom\";\n\nclass Table extends React.Component{\n\n  constructor(props) {\n    super(props);\n    this.state = {clients: []};\n    this.retrieveClients = this.retrieveClients.bind(this);\n  }\n\n  componentDidMount () {\n      this.retrieveClients();\n  }\n\n    retrieveClients() {\n        ClientDataService.getAll()\n            .then(response => {\n                this.setState({\n                    clients: response.data\n                });\n                console.log(response.data);\n            })\n            .catch(e => {\n                console.log(\"Ivancho\" + e);\n            });\n    }\n    deleteClient = (id) => {\n      if(window.confirm('Are you sure?')) {\n          ClientDataService.deleteClient(id)\n              .then(response => {\n                  console.log(response.data);\n              })\n              .catch(e => {\n                  console.log(e);\n              });\n          this.retrieveClients();\n          window.location.reload();\n      }\n  }\n\n  emailClient = (email) => {\n      ClientDataService.sendEmail(email)\n          .then(response => {\n              alert(\"Email sent!\");\n          })\n          .catch(e => {\n              alert('Error sending email, check if the email is correct');\n              console.log(e);\n          });\n  }\n\n  render(){\n  return (\n    <center>\n    <table className=\"tableClients\">\n      <thead>\n        <tr>\n          <th className=\"tableHeader\">First Name</th>\n          <th className=\"tableHeader\">Last Name</th>\n          <th className=\"tableHeader\">License Plate</th>\n          <th className=\"tableHeader\">Email</th>\n          <th className=\"tableHeader\">Phone Number</th>\n         \n          \n        </tr>\n      </thead>\n      <tbody>\n      { (this.state.clients.length > 0) ? this.state.clients.map( (client, index) => {\n           return (\n            <tr key={ index }>\n                <td>{ client.firstName }</td>\n                <td>{ client.lastName }</td>\n                <td>{ client.licensePlate}</td>\n                <td>{ client.email }</td>\n                <td>{ client.phoneNumber }</td>\n                <td><center><button onClick={() => this.emailClient(client.email)} className=\"btn btn-info\">Email</button></center></td>\n                <td><center><button className=\"btn btn-warning\">\n                    <Link to={\"/updateClient/\" + client.id} className=\"nav-btn\">\n                        Update\n                    </Link></button></center>\n                </td><td><center><button onClick={() => this.deleteClient(client.id)} className=\"btn btn-danger\">Delete</button></center></td>\n\n\n            </tr>\n          )\n         }) : <tr><td colSpan=\"5\">Loading...</td></tr> }\n      </tbody>\n    </table>\n    </center>\n  );\n  }\n}\n\nexport default Table;","import React, {Component} from 'react';\nimport ClientDataService from '../logic/ClientDataService';\nimport {BrowserRouter, Link, Redirect} from \"react-router-dom\";\n\nexport default class Update extends Component{\n  constructor(props){\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.getClient = this.getClient.bind(this);\n    this.updateClient = this.updateClient.bind(this);\n    this.state = {\n        currentClient:\n            {\n                id : null,\n                firstName : \"\",\n                lastName : \"\",\n                email : \"\",\n                licencePlate : \"\",\n                phoneNumber : \"\"\n            },\n        message : \"\"\n    };\n  }\n\n  componentDidMount()\n  {\n      this.getClient(this.props.match.params.id);\n      this.setState(prevState => ({\n          currentClient: {\n              ...prevState.currentClient,\n              id: this.props.match.params.id\n          }\n      }));\n  }\n\n  getClient = (id) =>{\n    ClientDataService.getClient(id).then(response => {\n      this.setState({\n        currentClient: response.data\n      });\n      console.log(response.data);\n    })\n    .catch(e => {\n      console.log(e)\n    });\n  }\n\n    handleChange = (e) => {\n        const val = e.target.value;\n        const tid = e.target.id;\n        this.setState(prevState => ({\n            currentClient: {\n                ...prevState.currentClient,\n                [tid]: val\n            }\n        }));\n        console.log(val + \" \" + tid)\n    }\n\n    updateClient = () =>{\n        if(this.state.currentClient.firstName != \"\" || this.state.currentClient.lastName != \"\" || this.state.currentClient.licencePlate !=\"\" || this.state.currentClient.phoneNumber.length == 9)\n        {ClientDataService.updateClient(\n            this.state.currentClient.id,\n            this.state.currentClient\n        )\n            .then(response => {\n                console.log(response.data);\n                this.setState({\n                    alert: \"The client was updated successfully!\"\n                });\n            })\n            .then(()=>{\n                this.props.history.push('/clients')\n            })\n            .catch(e => {\n                console.log(e);\n            });\n        }\n        else{\n            alert(\"The input you gave is inorrect\")\n        }\n            \n    }\n\n    render() {\n        let { currentClient } = this.state;\n        return(\n            <div>\n                <span className=\"h3\">\n                <h1>Update Client</h1>\n                <hr/>\n                <br/>\n                <center>\n                    <div className=\"col-12 col-lg-4 mt-2 hv-center\">\n                        <form>\n                            <div className=\"form-group text-left\">\n                                <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    placeholder=\"First Name\"\n                                    id=\"firstName\"\n                                    value={currentClient.firstName}\n                                    onChange = {this.handleChange}\n                                />\n                            </div>\n                            <div className=\"form-group text-left\">\n                                <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    placeholder=\"Last Name\"\n                                    id=\"lastName\"\n                                    value={currentClient.lastName}\n                                    onChange = {this.handleChange}\n                                />\n                            </div>\n                            <div className=\"form-group text-left\">\n                                <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    placeholder=\"License Plate\"\n                                    id=\"licensePlate\"\n                                    value={currentClient.licensePlate}\n                                    onChange = {this.handleChange}\n                                />\n                            </div>\n                            <div className=\"form-group text-left\">\n                                <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    placeholder=\"Phone Number\"\n                                    id=\"phoneNumber\"\n                                    value={currentClient.phoneNumber}\n                                    onChange = {this.handleChange}\n                                />\n                            </div>\n                            <div className=\"form-group text-left\">\n                                <input\n                                    className=\"form-control\"\n                                    type=\"text\"\n                                    placeholder=\"Email\"\n                                    id=\"email\"\n                                    value={currentClient.email}\n                                    onChange = {this.handleChange}\n                                />\n                            </div>\n                            \n                            <Link to={\"/clients\"} className=\"btn btn-danger\"  >\n                                    Cancel\n                            </Link>\n                            <a onClick={this.updateClient} className=\"btn btn-warning\" role=\"button\" >\n                               Update Client \n                            </a>\n                            <br/>\n                        </form>\n                    </div>\n                </center>{/*TODO center tag to div align center*/}\n                </span>\n                <p>{this.state.message}</p>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport \"./App.css\";\nimport RegisterClient from \"./components/register.component\"\nimport Header from \"./layouts/Header\"\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Table from \"./components/table.component\";\nimport UpdateClient from \"./components/update.component\"\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {clients: []};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Router>\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<Header />\n\t\t\t\t\t\t<Route exact path=\"/\" component={RegisterClient} />\n\t\t\t\t\t\t<Route  path=\"/customers\" component={Table} />\n\t\t\t\t\t\t<Route exact path=\"/updateClient/:id\" component={UpdateClient} />\n\t\t\t\t\t\t<Route exact path=\"/registerClient\" component={RegisterClient} />\n\t\t\t\t\t</div>\n\t\t\t\t</Router>\n\t\t\t</div>\n\t\t)\n  }\n}\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}